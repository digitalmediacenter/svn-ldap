#!/usr/bin/env perl

########################################################################################
####                                                                                ####
#### Marc Schoechlin <marc.schoechlin@dmc.de>                                       ####
#### Marc Schoechlin <ms@256bit.org>                                                ####
####                                                                                ####
########################################################################################

use strict;
use utf8;
use warnings;

require "timelocal.pl";
use POSIX qw(strftime);

use Getopt::Long;
use Data::Dumper;
use File::Copy;
use File::Compare;
use File::Basename;
use File::Temp qw/ :mktemp /;


# Add a lib-search-path relative to the binary
use FindBin qw($RealBin);
use lib "$RealBin/lib/";

use DmcAd::AdManagement;
use DmcTools::Log;

sub usage(){
  print "$0 --backupdir=<directory> --template=<templatefile> --target=<targetfile>\n";
  exit(1);
}

###############################################################################
## READ CONFIG FILE

my $cfgfile = $RealBin."/../conf/svntools-config.pl";

if (-f $cfgfile){
  do($cfgfile);
  if ($@){
    print STDERR "\nSyntax error in : $cfgfile\n";
    print STDERR "$@\n";
    exit 1;
  }
}else{
  print STDERR "\nMissing: $cfgfile\n";
  exit 1;
}
my $cfg = config();
my $lgr = DmcTools::Log->getLogger($cfg->{"global"}->{"logfile"});
$lgr->setLog($cfg->{"global"}->{"loglevel"});

###############################################################################
## CREATE NEW ACL FILE

sub createAclFile($$){
   my ($ad,$template) = @_;

   my ($fh_tempfile,$tempfile) = mkstemp( "/tmp/svnaccess-tmpfile-XXXXXXXXXX" );
   $lgr->log("Created tempfile : $tempfile");

   if (! -f $tempfile){
      return "";
   }

   my @attrs = ( 'cn' , 'dn', 'member');
   my @ldaparr = $ad->getADUnixGroups("(objectClass=group)",\@attrs);

   # Read template
   my @aclfile;
   open( INFILE, "<$template" ) || die "input-file '$template' could not be opened";
   while (my $zeile = <INFILE>) {
      chomp($zeile);
      push(@aclfile,$zeile);
   }
   close(INFILE);

   # Create new ACL File in memory
   my @newacl =  ();

   push(@newacl,'##############################################################################');
   push(@newacl,'### SubVersion ACL FILE');
   push(@newacl,'### ');
   push(@newacl,'###                 !!!!  DO NOT EDIT THIS FILE !!!!');
   push(@newacl,'###                !!!! FILE IS CREATED BY CRONJOB !!!');

   push(@newacl,'### ');
   push(@newacl,"### This file was generated by '$0'");
   push(@newacl,"");


   for my $zeile(@aclfile){
       if($zeile =~m /\@{\s*(.+)\s*::(.*<user>.*)}/){
          my $group = $1;
          my $template = $2;

          my @users = $ad->getsAMAccountNameforGroup($group);

          push(@newacl, "# EXPAND : $zeile");
          if (@users <= 0){
            next;
          }

          if ($template=~m /<user>/){
             for my $user(@users){
                my $newentry = $template;
                $newentry =~s /<user>/$user/g;
                push(@newacl,$newentry);
             }
          }
       }
       else{
          push(@newacl,$zeile);
       }
   }

 for my $line(@newacl){
    print $fh_tempfile $line."\n";
 }

 return $tempfile;
}

###############################################################################
## MAIN


my $ad = DmcAd::AdManagement->new($cfg->{"global"},$cfg->{"directory"});
my $tmp;

my @backupdir;
my @template;
my @target;
GetOptions(
    'backupdir=s' => \@backupdir,
    'template=s' => \@template,
    'target=s' => \@target,
) or usage();


if ((!defined $backupdir[0]) || (!defined $template[0]) || (!defined $target[0])){
  usage();
  exit(1);
}


if ( $ENV{LANG} !~m /UTF-8|utf8/ ){
     print "ERROR: Output is not UTF8";
     exit(1);
}

$lgr->log("START SVNACCESS FILE CREATION");

# create acls
my $tmpfile = createAclFile($ad,$template[0]);

## create a signal/end handler 
sub cleanup(){ 
 if ((defined $tmpfile) &&(-f $tmpfile)){
  print "deleting tempfile $tmpfile\n"; 
  system ("rm $tmpfile");
 }
};

$SIG{TERM} = \&cleanup;
$SIG{INT} = \&cleanup;
END{
   cleanup()
}

if (!defined $tmpfile){
 print STDERR "[".strftime("%Y-%m-%d %H:%M:%S",localtime(time()))."] $0 on ".$ENV{"HOSTNAME"}."\n" ;
 $tmp = "FAILED\n";
 $lgr->log($tmp);
 exit(1);
}

# Compare existing acls with new acls, if nothing changed stop here
if ((-f $target[0]) && (compare($tmpfile,$target[0]) == 0)){
   $tmp =  "SUCCESS: new acls are identical with the existing acls.....exiting";
   $lgr->log($tmp);
   unlink($tmpfile);
   exit(0);
}

# Create a backup
if ((defined $backupdir[0]) && 
    (-d $backupdir[0]) &&
    (-f $target[0]) 
   )
{
     my $backupfile = $backupdir[0]."/".basename($target[0])."_".strftime("%Y-%m-%d_%Hh%Mm%S",localtime(time()));
     $tmp = "targetfile '$target[0]' exists, creating backup to '$backupfile'";
     $lgr->log($tmp);
     if (!copy($target[0], $backupfile)){ 
      print STDERR "[".strftime("%Y-%m-%d %H:%M:%S",localtime(time()))."] $0 on ".$ENV{"HOSTNAME"}."\n" ;
      $tmp = "FAILED: backup failed";
      $lgr->log($tmp);
     }
}

if((system("chmod 644 '$tmpfile'") == 0) &&
   (system("chown ".$cfg->{"global"}->{'webserver-uid'}.":".
       $cfg->{"global"}->{'webserver-gid'}." '$tmpfile'") == 0)
  ){
    if (!move($tmpfile,$target[0])){
      $tmp = "move '$tmpfile' => '".$target[0]."' failed : $!";
      $lgr->log($tmp);
      exit(1);
    }
    exit(0);
}else
{
  print STDERR "[".strftime("%Y-%m-%d %H:%M:%S",localtime(time()))."] $0 on ".$ENV{"HOSTNAME"}."\n" ;
  $tmp = "change of permission and ownership for '$tmpfile' failed : $!\n";
  $lgr->log($tmp);
  exit(1); 
}

exit(0);
# vim: ai et ts=2 shiftwidth=2 expandtab tabstop=3 filetype=perl
